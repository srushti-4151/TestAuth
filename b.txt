Backend
npm init - this will make package.json
in package.json = "type" : "module"

public folder
.env
src > app.js , constant.js, index.js
src > make folders -> controlrs, middleware, model, routes, utils, db

install nodemon = npm i -D nodemon---> install as dev depedancy
in package.json 
"scripts": {
    "dev": "nodemon src/index.js"
  },

npm i mongoose express dotenv

make mongo atlas set up and 
env -> port, db_url (remove the slash from end of connection string) 
now db>index.js = connection code 
call that connection() in index.js also .then().catch() do there 
now in index.js  import dotenv , { app }, connectDB, call connectDB.then().catch()

cookieparser, cors, = code app.js for getting data and frontend url
app.use(cors({origin:, credentials: true })), json, urlencoded, static, cookieparser

model, bcrypt , JWT


https://v3.tailwindcss.com/docs/guides/vite
npm create vite@latest my-project -- --template react
cd my-project
npm install -D tailwindcss@3 postcss autoprefixer
npx tailwindcss init -p


PORT=8000
MONGODB_URI=mongodb+srv://srushti:srushtipatel40401@clusternew0.ipp7abx.mongodb.net
ACCESS_TOKEN_SECRET=559aead08264d5795d3909718cdd05abd49572e84fe55590eef31a88a08fdffd
ACCESS_TOKEN_EXPIRY=2d
REFRESH_TOKEN_SECRET=08f271887ce94707da822d5263bae19d5519cb3614e0daedc4c7ce5dab7473f1
REFRESH_TOKEN_EXPIRY=10d

import mongoose from "mongoose";
import { DB_NAME } from "../constants.js";

const connectDB = async () => {
  try {
    const connection_instance = await mongoose.connect(`${process.env.MONGODB_URI}/${DB_NAME}`);
    console.log(`\n MongoDB connected || DB HOST: ${connection_instance.connection.host}`);
  } catch (error) {
    console.log("MONGODB connection error:", error);
    process.exit(1);
  }
};

export default connectDB;
import connectDB from "./db/index.js";
import { app } from "./app.js"
import 'dotenv/config'

connectDB()
    .then(() => {
        app.on("error", () => {
            console.log("ERROR: ", error);
            throw error;
        });
        app.listen(process.env.PORT || 800, () => {
            console.log(`Server is running at port : ${process.env.PORT}`);
        });
    })
    .catch((error) => {
        console.log("MONGO db connection failed !!", error);
    })

import express from "express"
import cors from "cors"
import cookieParser from "cookie-parser"

const app = express()

const allowedOrigins = [
    "http://localhost:5173",
    "http://localhost:5174"
]

app.use(cors({
    origin: allowedOrigins,
    credentials: true
}))

app.use(express.json({limit: "16kb"})) 
app.use(express.urlencoded({extended: true, limit: "16kb"})) 
app.use(express.static("public"))  
app.use(cookieParser())

import userRouter from "./routes/user.routes.js";

app.use("/api/v1/users", userRouter)


export {app};


import { Router } from "express";
const router = Router();
router.route("/addDish").post(
    verifyJWT,
    authorizeRoles("chef"),
    upload.single("imageUrl"),
    addDish
)
router.route("/:dishId").put(verifyJWT, authorizeRoles("chef"), upload.single("imageUrl"), updateDish);
router.route("/:dishId").delete(verifyJWT, authorizeRoles("chef"), deleteDish);
router.route("/getAllDish").get(getDishes);
router.route("/filterDish/:cateId").get(getDishByCate);
export default router;


import jwt from "jsonwebtoken";
import { User } from "../models/user.model.js";
export const verifyJWT = async (req, res, next) => {
  try {
    let token;
    if (
      req.headers.authorization &&
      req.headers.authorization.startsWith("Bearer ")
    ) {
      token = req.headers.authorization.split(" ")[1];
    } else if (req.cookies && req.cookies.accessToken) {
      token = req.cookies.accessToken;
    }

    if (!token) {
      return res.status(401).json({
        success: false,
        message: "Unauthorized request.",
      });
    }

    const decodedToken = jwt.verify(token, process.env.ACCESS_TOKEN_SECRET);
    //3. take id from token to find user
    const user = await User.findById(decodedToken?._id).select(
      "-password -refreshToken"
    );

    if (!user) {
      return res.status(401).json({
        success: false,
        message: "Invalid Access Token",
      });
    }
    req.user = user;
    next();

  } catch (error) {
    res.status(401).json({
      message: "Invalid Access Token",
      error: error.message,
    });
  }
};
export const authorizeRoles = (...allowedRoles) => {
  return (req, res, next) => {
    if (!req.user || !allowedRoles.includes(req.user.role)) {
      return res.status(403).json({
        success: false,
        message: "Access denied. You don't have permission.",
      });
    }
    next();
  };
};
import multer from "multer";
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, './public/temp')
  },
  filename: function (req, file, cb) {
    // const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9)
    // cb(null, file.fieldname + '-' + uniqueSuffix)
    cb(null, file.originalname)
  }
})
export const upload = multer({ storage, })


import mongoose, { Schema } from "mongoose";
import bcrypt from "bcrypt"
import jwt from "jsonwebtoken";

const userSchema = new Schema({
    username: {
      type: String,
      required: true,
      unique: true,
      trim: true,
      index: true,
    },
     category: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "Category",
      required: true,
    },
    email: {
    },
    role: {
      type: String,
      required: true,
      enum: ["customer", "chef", "manager"],
      default: "customer",
    },
    password: {
      type: String,
      required: [true, "Password is required"],
    },
    refreshToken: {
      type: String,
    },
}, { timestamps: true });

userSchema.pre("save", async function (next) {
    if(!this.isModified("password")) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
})

userSchema.methods.isPasswordCorrect = async function (password) {
    return await bcrypt.compare(password, this.password);
}

userSchema.methods.generateAccessToken = function () {
  return jwt.sign(
    {
      _id: this._id,
      email: this.email,
      role: this.role
    },
    process.env.ACCESS_TOKEN_SECRET,
    {
      expiresIn: process.env.ACCESS_TOKEN_EXPIRY
    }
  )
}
userSchema.methods.generateRefreshToken = function () {
  return jwt.sign(
    {
      _id: this._id,
    },
    process.env.REFRESH_TOKEN_SECRET,
    {
      expiresIn: process.env.REFRESH_TOKEN_EXPIRY,
    }
  );
};

export const User = mongoose.model("User", userSchema);


//con
import { User } from "../models/user.model.js";
import jwt from "jsonwebtoken";

const generateAccessAndRefereshTokens = async (userId) => {
  try {
    const user = await User.findById(userId);
    const accessToken = user.generateAccessToken();
    const refreshToken = user.generateRefreshToken();

    user.refreshToken = refreshToken;
    await user.save({ validateBeforeSave: false }); 

    return { accessToken, refreshToken };
  } catch (error) {
    throw new Error(
      `Error generating tokens: ${error.message || "Unknown error"}`
    );
  }
};

export const refreshAccessToken = async (req, res) => {
  const incomingRefreshToken =
    req.cookies.refreshToken || req.body.refreshToken;

  if (!incomingRefreshToken) {
    return res.status(401).json({
      success: false,
      message: "Unauthorized request: Refresh token missing",
    });
  }

  try {
    const decodedToken = jwt.verify(
      incomingRefreshToken,
      process.env.REFRESH_TOKEN_SECRET
    );

    const user = await User.findById(decodedToken?._id);
    if (!user) {
      return res.status(401).json({
        success: false,
        message: "Invalid refresh token: User not found",
      });
    }

    if (incomingRefreshToken !== user?.refreshToken) {
      return res.status(401).json({
        success: false,
        message: "Refresh token is expired or has been reused",
      });
    }

    // Invalidate old refresh token
    user.refreshToken = null;
    await user.save({ validateBeforeSave: false });

    const options = {
      httpOnly: true,
      secure: true,
      sameSite: "none",
    };

    // Generate new tokens
    const { accessToken, refreshToken } = await generateAccessAndRefereshTokens(
      user._id
    );

    return res.status(200).cookie("refreshToken", refreshToken, options).json({
      success: true,
      message: "Access token refreshed successfully",
      data: {
        accessToken,
      },
    });
  } catch (error) {
    return res.status(401).json({
      success: false,
      message: error?.message || "Invalid or expired refresh token",
    });
  }
};

export const registerUser = async (req, res) => {
  try {
    const { email, username, password, role } = req.body;
    if (!email?.trim() || !username?.trim() || !password?.trim()) {
      return res.status(400).json({
        error: "All fields (email, username, password) are required.",
      });
    }

    const existedUser = await User.findOne({
      $or: [{ email }, { username }],
    });

    if (existedUser) {
      return res
        .status(400)
        .json({ error: "User with email or username already exists" });
    }

    const user = await User.create({
      email,
      username,
      role,
      password,
    });

    const createdUser = await User.findById(user._id).select(
      "-password -refreshToken"
    );

    if (!createdUser) {
      return res
        .status(400)
        .json({ error: "Something went wrong while registering the user" });
    }

    return res.status(200).json({
      success: true,
      message: "User registered successfully",
      data: createdUser,
    });
  } catch (error) {
    console.error("Rgister error:", error);
    res
      .status(500)
      .json({ message: "Internal Server Error", error: error.message });
  }
};

export const login = async (req, res) => {
  try {
    const { username, email, password } = req.body;

    if (!(username || email)) {
      return res.status(400).json({
        success: false,
        message: "Username or email is required",
      });
    }

    // Check if password is provided
    if (!password) {
      return res.status(400).json({
        success: false,
        message: "Password is required",
      });
    }

    // Find user by username or email
    const user = await User.findOne({
      $or: [{ username }, { email }],
    });

    if (!user) {
      return res.status(404).json({
        success: false,
        message: "User not found",
      });
    }

    const isPasswordValid = await user.isPasswordCorrect(password);
    if (!isPasswordValid) {
      return res.status(401).json({
        success: false,
        message: "Invalid credentials",
      });
    }

    if (user.refreshToken) {
      user.refreshToken = null;
      await user.save({ validateBeforeSave: false });
    }

    const { accessToken, refreshToken } = await generateAccessAndRefereshTokens(
      user._id
    );

    const loggedInUser = await User.findById(user._id).select(
      "-password -refreshToken"
    );

    const options = {
      httpOnly: true,
      sameSite: "Lax", // use "Lax" for localhost dev, or "Strict" if CSRF is not a concern
      maxAge: 10 * 24 * 60 * 60 * 1000,
      expires: new Date(Date.now() + 10 * 24 * 60 * 60 * 1000),
    };

    return res
      .status(200)
      .cookie("refreshToken", refreshToken, options)
      .json({
        success: true,
        message: "Login successful",
        data: {
          user: loggedInUser,
          accessToken,
        },
      });
  } catch (error) {
    console.error("login error:", error);
    res
      .status(500)
      .json({ message: "Internal Server Error", error: error.message });
  }
};

export const logout = async (req, res) => {
  await User.findByIdAndUpdate(
    req.user._id,
    {
      $unset: {
        refreshToken: 1,
      },
    },
    {
      new: true,
    }
  );

  const options = {
    httpOnly: true,
    secure: true,
  };

  return res
    .status(200)
    .clearCookie("accessToken", options)
    .clearCookie("refreshToken", options)
    .json({
      success: true,
      message: "Logged out successful",
    });
};

export const getCurrentUser = async (req, res) => {
  return res.status(200).json({
    success: true,
    data: req.user,
    message: "User fetched Successfully",
  });
};

export const getAllUsers = async (req, res) => {
  try {
    const totalUser = await User.countDocuments();

    const users = await User.find().select("-password");

    res.status(200).json({
      success: true,
      totalUser,
      data: users,
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: "Sever Error",
      error: error.message,
    });
  }
};



import { Category } from "../models/category.model.js";
import { Dish } from "../models/dish.model.js";
import { uploadOnCloudinary } from "../util/Cloudinary.js";
import fs from "fs";

export const addDish = async (req, res) => {
  try {
    const { name, description, price, imageUrl, isAvailable, category } =
      req.body;

    // Validate required fields
    if (!name || !price || !category) {
      return res.status(400).json({
        success: false,
        message: "Name, price, and category are required",
      });
    }

    // Check if category exists
    const existingCategory = await Category.findById(category);
    if (!existingCategory) {
      return res
        .status(400)
        .json({ success: false, message: "Category not found" });
    }

    // const imageUrlLocalPath = req.file?.imageUrl[0]?.path;
    const imageUrlLocalPath = req.file?.path;
    console.log("imageUrlLocalPath is here: ", imageUrlLocalPath);

    if (!imageUrlLocalPath) {
      return res
        .status(400)
        .json({ success: false, message: "image file is required" });
    }

    const image = await uploadOnCloudinary(imageUrlLocalPath);
    if (!image?.url) {
      return res
        .status(400)
        .json({ success: false, message: "image file is required" });
    }

    const newDish = await Dish.create({
      name,
      description,
      price,
      imageUrl: image.secure_url,
      isAvailable,
      category,
      createdBy: req.user._id,
    });

    res.status(201).json({ success: true, data: newDish });
  } catch (err) {
    res.status(500).json({ success: false, message: err.message });
  }
};

export const getDishes = async (req, res) => {
  try {
    // const dishes = await Dish.find()
    //   .populate("category", "name")
    //   .populate("createdBy", "username email");

    const dishes = await Dish.aggregate([
      {
        $lookup: {
          from: "categories",
          localField: "category",
          foreignField: "_id",
          as: "category",
        },
      },
      {
        $unwind: "$category",
      },
      {
        $lookup: {
          from: "users", // collection name
          localField: "createdBy",
          foreignField: "_id",
          as: "createdBy",
        },
      },
      {
        $unwind: "$category",
      },
      {
        $project: {
          name: 1,
          description: 1,
          price: 1,
          imageUrl: 1,
          isAvailable: 1,
          createdAt: 1,
          updatedAt: 1,
          category: "$category.name",
          createdBy: "$createdBy.username",
        },
      },
    ]);

    return res.status(200).json({
      success: true,
      data: dishes,
    });
  } catch (err) {
    res.status(500).json({ success: false, message: err.message });
  }
};

export const updateDish = async (req, res) => {
  try {
    const { dishId } = req.params;
    const userId = req.user._id;
    const updateData = { ...req.body };

    const existingDish = await Dish.findById(dishId);

    if (!existingDish) {
      return res
        .status(404)
        .json({ success: false, message: "Dish not found" });
    }

    // Ensure the chef owns the dish
    if (existingDish.createdBy.toString() !== userId.toString()) {
      return res.status(403).json({ success: false, message: "Unauthorized" });
    }

    if (req.file) {
      try {
        const uploadResult = await uploadOnCloudinary(req.file.path);
        if (!uploadResult?.url) {
          return res
            .status(500)
            .json({ success: false, message: "Cloudinary upload failed" });
        }

        updateData.imageUrl = uploadResult.url;
      } catch (error) {
        // Clean up failed upload
        if (req.file.path) fs.unlinkSync(req.file.path);
        throw error;
      }
    }

    const updatedDish = await Dish.findByIdAndUpdate(
      dishId,
      { $set: updateData },
      {
        new: true,
        projection: { __v: 0 },
        runValidators: true,
      }
    );

    return res.status(200).json({
      success: true,
      data: updatedDish,
    });
  } catch (err) {
    res.status(500).json({ success: false, message: err.message });
  }
};

export const deleteDish = async (req, res) => {
  try {
    const { dishId } = req.params;
    const userId = req.user._id;

    const existingDish = await Dish.findById(dishId);

    if (!existingDish) {
      return res
        .status(404)
        .json({ success: false, message: "Dish not found" });
    }

    // Ensure the chef owns the dish
    if (existingDish.createdBy.toString() !== userId.toString()) {
      return res.status(403).json({ success: false, message: "Unauthorized" });
    }

    const response = await Dish.findByIdAndDelete(dishId);

    if (!response) {
      res.status(500).json({ success: false, message: "Failed  To delete" });
    }

    return res.status(200).json({
      success: true,
      message: "Dish Deleted successfully",
    });
  } catch (err) {
    res.status(500).json({ success: false, message: err.message });
  }
};





import { v2 as cloudinary } from "cloudinary";
import fs from "fs";

// Configuration
cloudinary.config({
  cloud_name: "dfos8wwny",
  api_key: "671991446811879",
  api_secret: "eVt9l7QxCZlee8QNkNTCWWp2fDY",
});

export const uploadOnCloudinary = async (localFilePath) => {
  try {
    console.log("localFilepath", localFilePath)
    if (!localFilePath) {
      console.log("uploadOnCloudinary: File path is missing");
      return null;
    }
    const uploadResult = await cloudinary.uploader.upload(localFilePath,{resource_type: "auto",})

    if (!uploadResult || !uploadResult.secure_url) {
      console.error("Cloudinary upload failed:", uploadResult);
      return null;
    }

    fs.unlinkSync(localFilePath);
    return uploadResult;
  } catch (error) {
    console.error("Cloudinary Upload Error:", error);
    fs.unlinkSync(localFilePath);
  }
};
